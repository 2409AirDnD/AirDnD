generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  email String
  avatar String      //image url, or maybe explore upload functionality

  player_instances Player[]
  campaigns Campaign[]
}

model Campaign {
  id Int @id @default(autoincrement())
  name String
  description String

  DM User @relation(fields: [dm_ID], references: [id])
  dm_ID Int

  players Player[]
  characters CharacterSheet[]
}

model Player {
  id Int @id @default(autoincrement())

  player User @relation(fields: [player_ID], references: [id])
  player_ID Int
  username String
  campaign Campaign @relation(fields: [campaign_ID], references: [id])
  campaign_ID Int

  characters CharacterSheet[]
}

model CharacterSheet {
  id Int @id @default(autoincrement())
  charactername String
  experience Int
  armorclass Int
  initiative Int
  speed Int
  maxhitpoints Int
  currenthitpoints Int
  level Int
  proficiencybonus Int
  class Class[]
  race  Race []
  ability Ability[]
  spells Spell[]
  inventory Inventory[]
  features ClassFeatures[]
  traits Traits[]
  actions Actions[]
  skills Skills[]

  player Player @relation(fields: [player_ID], references: [id])
  player_ID Int
  campaign Campaign @relation(fields: [campaign_ID], references: [id])
  campaign_ID Int
  user  User @relation(fields:[playername], references:[username])
  playername String
}

model Ability {
  index  String @id
  name String
  rolledvalue Int
  modifier Int
  description String
}

model Skills {
  name String @id
  description String
  proficiency Boolean
  characterproficiency  CharacterSheet @relation(fields:[proficiencyvalue], references: [proficiencybonus])
  proficiencyvalue Int
  abilityvalue Ability @relation(fields:[value], references: [modifier])
  value Int
  ability Ability @relation(fields:[abilityused], references:[name])
  abilityused String
}

model Class {
  id Int @id @default(autoincrement())
  name String
//Spells is a field in character as well as class. In character to track the spells that the player has chosen for their character, and in class to reflect all spells available for that class.
  possible_spells Spell[]
}

model Race {
  id Int @id @default(autoincrement())
  name String
  age String
  speed Int
  language_description String
  languages String
  alignment String
  size String
  size_description String

  traits Trait[]
}

model Spell {
  id Int @id @default(autoincrement())
  
  classes_with_spell Class @relation(fields: [class_ID], references: [id])
  class_ID Int

  characters_with_spells Character @relation(fields: [character_ID], references: [id])
  character_ID Int
}

model Trait {
  id Int @id @default(autoincrement())
  name String
  description String

  races Race @relation(fields: [race_ID], references: [id])
  race_ID Int
}